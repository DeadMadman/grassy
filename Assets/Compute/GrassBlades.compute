// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//Input
struct SourceVertex {
    float3 positionOS;
    float2 uv;
};
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;

//Output
struct DrawVertex {
    float3 positionWS;
    float2 uv;
};

struct DrawTriangle {
    float3 normalWS;
    DrawVertex vertices[3];
};
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

//args
struct IndirectArgs {
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};
RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

int _NumSourceTriangles;
float _PyramidHeight;
float4x4 _LocalToWorld;

DrawVertex TransformToWorldSpace(SourceVertex v) {
    DrawVertex o;
    o.positionWS = mul(_LocalToWorld, float4(v.positionOS, 1)).xyz;
    o.uv = v.uv;
    return o;
}

float3 GetNormalFromTriangle(float3 a, float3 b, float3 c) {
    return normalize(cross(b - a, c - a));
}

float3 GetTriangleCenter(float3 a, float3 b, float3 c) {
    return (a + b + c) / 3.0;
}
float2 GetTriangleCenter(float2 a, float2 b, float2 c) {
    return (a + b + c) / 3.0;
}

void SetupAndOutputTriangle(DrawVertex a, DrawVertex b, DrawVertex c) {
    float3 normalWS = GetNormalFromTriangle(a.positionWS, b.positionWS, c.positionWS);

    DrawTriangle tri;
    tri.normalWS = normalWS;
    tri.vertices[0] = a;
    tri.vertices[1] = b;
    tri.vertices[2] = c;

    _DrawTriangles.Append(tri);
}

DrawVertex MakeDrawVertex(SourceVertex vert) {
    DrawVertex output;
    output.positionWS = mul(_LocalToWorld, float4(vert.positionOS, 1)).xyz;
    output.uv = vert.uv;
    return output;
}

DrawVertex GrassVertex(float3 positionOS, float width, float height, float2 uv)
{
    DrawVertex output = (DrawVertex)0;
    float3 newPosOS = positionOS + float3(width, height, 0);
    output.positionWS = mul(_LocalToWorld, float4(newPosOS, 1)).xyz;
    output.uv = uv;
    return output;
}

DrawVertex ExtrudeVertex(DrawVertex vert, float3 normal, float height) {
    DrawVertex output;
    output.positionWS = vert.positionWS + normal * height;
    output.uv = vert.uv;
    return output;
}

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumSourceTriangles) {
        return;
    }

    // Get the vertices which make up this triangle
    // The triangle array contains indices to the vertex array
    // Three values in the triangle array describe one triangle in the source mesh
    int triStart = id.x * 3;
    DrawVertex inputs[3];
    inputs[0] = MakeDrawVertex(_SourceVertices[_SourceTriangles[triStart]]);
    inputs[1] = MakeDrawVertex(_SourceVertices[_SourceTriangles[triStart + 1]]);
    inputs[2] = MakeDrawVertex(_SourceVertices[_SourceTriangles[triStart + 2]]);
    float3 triNormal = GetNormalFromTriangle(inputs[0].positionWS, inputs[1].positionWS, inputs[2].positionWS);
    
    DrawTriangle tri = (DrawTriangle)0;
    tri.normalWS = triNormal;
     for (int i = 0; i < 3; i++) {
         tri.vertices[i] = ExtrudeVertex(inputs[i], triNormal, _PyramidHeight);
     }

    _DrawTriangles.Append(tri);
}



